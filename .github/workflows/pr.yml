# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build Pull Requests

on: [pull_request]

env:
  ELASTIC_APIKEY: ${{ secrets.ELASTIC_APIKEY }}
  ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
  ELASTIC_CLOUD_APIKEY: ${{ secrets.ELASTIC_CLOUD_APIKEY }}
  ELASTIC_CLOUD_URL: ${{ secrets.ELASTIC_CLOUD_URL }}

jobs:
  # We initialize the PR number so that we can use it in the other jobs
  get-pr-number:
    runs-on: ubuntu-latest
    # The pr_number will be used in the other jobs as ${{ needs.get-pr-number.outputs.pr_number }}
    outputs:
      pr_number: ${{ steps.pr_number.outputs.pr_number }}
    steps:
      # Find the PR associated with this push, if there is one.
      - uses: jwalton/gh-find-current-pr@master
        id: findPr
      - id: pr_number
        run: echo "pr_number=${{ steps.findPr.outputs.pr }}" >> "$GITHUB_OUTPUT"
        if: success() && steps.findPr.outputs.number

  # We build the project but the docker images and run the unit tests
  build:
    runs-on: ubuntu-latest
    needs: get-pr-number
    steps:
    - uses: actions/checkout@v5
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
    - name: Display Maven information
      run: mvn --version
    - name: Build but the docker images
      run: mvn --batch-mode install -Ddocker.skip -DskipIntegTests

  # We run integration tests with elastic stack 9 (default)
  it:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Dtests.output=always -Dtests.parallelism=1 -Dtests.leaveTemporary=false

  # We run integration tests with elastic stack 8
  it-es8:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Pes-8x -Dtests.parallelism=1 -Dtests.leaveTemporary=false

  # We run integration tests with elastic stack 7
  it-es7:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Pes-7x -Dtests.parallelism=1 -Dtests.leaveTemporary=false

  # We run integration tests with elastic stack 6
  it-es6:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Pes-6x -Dtests.parallelism=1 -Dtests.leaveTemporary=false

  # We run integration tests with Elastic Cloud Elasticsearch service (if secrets are set)
  it-cloud:
    runs-on: ubuntu-latest
    needs:
      - build
      - get-pr-number
    steps:
      - uses: actions/checkout@v5
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
        run: |
          echo "Running integration tests with Elastic Cloud Elasticsearch service with prefix ${{ needs.get-pr-number.outputs.pr_number }}"
          mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Dtests.leaveTemporary=false -Dtests.timeoutSuite=1200000 -Dtests.timeout=900000 -Dtests.heartbeat=30 -Dtests.cluster.apiKey=${{ secrets.ELASTIC_CLOUD_APIKEY }} -Dtests.cluster.url=${{ secrets.ELASTIC_CLOUD_URL }} -Dtests.index.prefix=${{ needs.get-pr-number.outputs.pr_number }}

  # We run integration tests with Elastic Cloud Serverless (if the eare set)
  it-serverless:
    runs-on: ubuntu-latest
    needs:
      - build
      - get-pr-number
    steps:
      - uses: actions/checkout@v5
        if: ${{ env.ELASTIC_APIKEY && env.ELASTIC_URL }}
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        if: ${{ env.ELASTIC_APIKEY && env.ELASTIC_URL }}
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        if: ${{ env.ELASTIC_APIKEY && env.ELASTIC_URL }}
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        if: ${{ env.ELASTIC_APIKEY && env.ELASTIC_URL }}
        run: |
          echo "Running integration tests with Elastic Cloud Elasticsearch Serverless service with prefix ${{ needs.get-pr-number.outputs.pr_number }}"
          mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Dtests.leaveTemporary=false -Dtests.timeoutSuite=1200000 -Dtests.timeout=900000 -Dtests.heartbeat=30 -Dtests.cluster.apiKey=${{ secrets.ELASTIC_APIKEY }} -Dtests.cluster.url=${{ secrets.ELASTIC_URL }} -Dtests.index.prefix=${{ needs.get-pr-number.outputs.pr_number }}

  # We run this job in parallel after the build
  build-docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Build the docker images
        run: mvn --batch-mode install -DskipTests

  # We run integration tests from a windows machine to Elastic Cloud
  it-windows:
    runs-on: windows-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Run the integration tests
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
        shell: bash
        run: |
          echo "Running integration tests from Windows with Elastic Cloud Elasticsearch service with prefix win-${{ needs.get-pr-number.outputs.pr_number }}"
          mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Dtests.leaveTemporary=false -Dtests.timeoutSuite=1200000 -Dtests.timeout=900000 -Dtests.heartbeat=30 -Dtests.cluster.apiKey=${{ secrets.ELASTIC_CLOUD_APIKEY }} -Dtests.cluster.url=${{ secrets.ELASTIC_CLOUD_URL }} -Dtests.index.prefix=win-${{ needs.get-pr-number.outputs.pr_number }}
